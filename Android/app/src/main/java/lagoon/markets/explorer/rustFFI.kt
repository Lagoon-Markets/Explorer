// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package lagoon.markets

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean
import kotlin.coroutines.resume
import kotlinx.coroutines.CancellableContinuation
import kotlinx.coroutines.DelicateCoroutinesApi
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.Job
import kotlinx.coroutines.launch
import kotlinx.coroutines.suspendCancellableCoroutine

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

/**
 * @suppress
 */
@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField var capacity: Long = 0
    @JvmField var len: Long = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

   internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) = uniffiRustCall() { status ->
            // Note: need to convert the size to a `Long` value to make this work with JVM.
            UniffiLib.INSTANCE.ffi_explorer_native_rustbuffer_alloc(size.toLong(), status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun create(capacity: ULong, len: ULong, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_explorer_native_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 *
 * @suppress
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setLong(0, value.capacity)
        pointer.setLong(8, value.len)
        pointer.setPointer(16, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getLong(0))
        value.writeField("len", pointer.getLong(8))
        value.writeField("data", pointer.getLong(16))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
internal open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
/**
 * The FfiConverter interface handles converter types to and from the FFI
 *
 * All implementing objects should be public to support external types.  When a
 * type is external we need to import it's FfiConverter.
 *
 * @suppress
 */
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

/**
 * FfiConverter that uses `RustBuffer` as the FfiType
 *
 * @suppress
 */
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == UNIFFI_CALL_SUCCESS
    }

    fun isError(): Boolean {
        return code == UNIFFI_CALL_ERROR
    }

    fun isPanic(): Boolean {
        return code == UNIFFI_CALL_UNEXPECTED_ERROR
    }

    companion object {
        fun create(code: Byte, errorBuf: RustBuffer.ByValue): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(message: String) : kotlin.Exception(message)

/**
 * Each top-level error class has a companion object that can lift the error from the call status's rust buffer
 *
 * @suppress
 */
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: kotlin.Exception> uniffiRustCallWithError(errorHandler: UniffiRustCallStatusErrorHandler<E>, callback: (UniffiRustCallStatus) -> U): U {
    var status = UniffiRustCallStatus()
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun<E: kotlin.Exception> uniffiCheckCallStatus(errorHandler: UniffiRustCallStatusErrorHandler<E>, status: UniffiRustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

/**
 * UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
 *
 * @suppress
 */
object UniffiNullRustCallStatusErrorHandler: UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback)
}

internal inline fun<T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun<T, reified E: Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}
// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<Long, T>()
    private val counter = java.util.concurrent.atomic.AtomicLong(0)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(1)
        map.put(handle, obj)
        return handle
    }

    // Get an object from the handle map
    fun get(handle: Long): T {
        return map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")
    }

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T {
        return map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "explorer_native"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(`data`: Long,`pollResult`: Byte,)
}
internal interface UniffiForeignFutureFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFuture(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureFree? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureFree? = null,
    ): UniffiForeignFuture(`handle`,`free`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFuture) {
        `handle` = other.`handle`
        `free` = other.`free`
    }

}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructPointer(
    @JvmField internal var `returnValue`: Pointer = Pointer.NULL,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Pointer = Pointer.NULL,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructPointer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructPointer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompletePointer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructPointer.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructRustBuffer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructRustBuffer.UniffiByValue,)
}
@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureStructVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructVoid(`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructVoid) {
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructVoid.UniffiByValue,)
}
internal interface UniffiCallbackInterfaceEventListenerFfiMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`event`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
@Structure.FieldOrder("onEvent", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceEventListenerFfi(
    @JvmField internal var `onEvent`: UniffiCallbackInterfaceEventListenerFfiMethod0? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `onEvent`: UniffiCallbackInterfaceEventListenerFfiMethod0? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceEventListenerFfi(`onEvent`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceEventListenerFfi) {
        `onEvent` = other.`onEvent`
        `uniffiFree` = other.`uniffiFree`
    }

}

















































































































// For large crates we prevent `MethodTooLargeException` (see #2340)
// N.B. the name of the extension is very misleading, since it is 
// rather `InterfaceTooLargeException`, caused by too many methods 
// in the interface for large crates.
//
// By splitting the otherwise huge interface into two parts
// * UniffiLib 
// * IntegrityCheckingUniffiLib (this)
// we allow for ~2x as many methods in the UniffiLib interface.
// 
// The `ffi_uniffi_contract_version` method and all checksum methods are put 
// into `IntegrityCheckingUniffiLib` and these methods are called only once,
// when the library is loaded.
internal interface IntegrityCheckingUniffiLib : Library {
    // Integrity check functions only
    fun uniffi_explorer_native_checksum_func_rustffi_construct_tx(
): Short
fun uniffi_explorer_native_checksum_func_rustffi_discover_resources(
): Short
fun uniffi_explorer_native_checksum_func_rustffi_ffi_version(
): Short
fun uniffi_explorer_native_checksum_func_rustffi_format_amount(
): Short
fun uniffi_explorer_native_checksum_func_rustffi_get_auth(
): Short
fun uniffi_explorer_native_checksum_func_rustffi_get_profile(
): Short
fun uniffi_explorer_native_checksum_func_rustffi_get_x402(
): Short
fun uniffi_explorer_native_checksum_func_rustffi_get_x402_resources(
): Short
fun uniffi_explorer_native_checksum_func_rustffi_init_db(
): Short
fun uniffi_explorer_native_checksum_func_rustffi_optimize_transaction(
): Short
fun uniffi_explorer_native_checksum_func_rustffi_send_optimized_transaction(
): Short
fun uniffi_explorer_native_checksum_func_rustffi_shorten_base58(
): Short
fun uniffi_explorer_native_checksum_func_rustffi_siws(
): Short
fun uniffi_explorer_native_checksum_func_rustffi_store_x402(
): Short
fun uniffi_explorer_native_checksum_func_rustffi_to_base64(
): Short
fun uniffi_explorer_native_checksum_method_appdetailsffi_domain(
): Short
fun uniffi_explorer_native_checksum_method_appdetailsffi_favicon(
): Short
fun uniffi_explorer_native_checksum_method_appdetailsffi_identity(
): Short
fun uniffi_explorer_native_checksum_method_appdetailsffi_sign_in_statement(
): Short
fun uniffi_explorer_native_checksum_method_eventemitterffi_set_listener(
): Short
fun uniffi_explorer_native_checksum_method_eventemitterffi_start(
): Short
fun uniffi_explorer_native_checksum_method_eventlistenerffi_on_event(
): Short
fun uniffi_explorer_native_checksum_constructor_appdetailsffi_new(
): Short
fun uniffi_explorer_native_checksum_constructor_eventemitterffi_new(
): Short
fun ffi_explorer_native_uniffi_contract_version(
): Int

}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.
internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            val componentName = "rustFFI"
            // For large crates we prevent `MethodTooLargeException` (see #2340)
            // N.B. the name of the extension is very misleading, since it is 
            // rather `InterfaceTooLargeException`, caused by too many methods 
            // in the interface for large crates.
            //
            // By splitting the otherwise huge interface into two parts
            // * UniffiLib (this)
            // * IntegrityCheckingUniffiLib
            // And all checksum methods are put into `IntegrityCheckingUniffiLib`
            // we allow for ~2x as many methods in the UniffiLib interface.
            // 
            // Thus we first load the library with `loadIndirect` as `IntegrityCheckingUniffiLib`
            // so that we can (optionally!) call `uniffiCheckApiChecksums`...
            loadIndirect<IntegrityCheckingUniffiLib>(componentName)
                .also { lib: IntegrityCheckingUniffiLib ->
                    uniffiCheckContractApiVersion(lib)
                    uniffiCheckApiChecksums(lib)
                }
            // ... and then we load the library as `UniffiLib`
            // N.B. we cannot use `loadIndirect` once and then try to cast it to `UniffiLib`
            // => results in `java.lang.ClassCastException: com.sun.proxy.$Proxy cannot be cast to ...`
            // error. So we must call `loadIndirect` twice. For crates large enough
            // to trigger this issue, the performance impact is negligible, running on
            // a macOS M1 machine the `loadIndirect` call takes ~50ms.
            val lib = loadIndirect<UniffiLib>(componentName)
            // No need to check the contract version and checksums, since 
            // we already did that with `IntegrityCheckingUniffiLib` above.
            uniffiCallbackInterfaceEventListenerFfi.register(lib)
            // Loading of library with integrity check done.
            lib
        }
        
        // The Cleaner for the whole library
        internal val CLEANER: UniffiCleaner by lazy {
            UniffiCleaner.create()
        }
    }

    // FFI functions
    fun uniffi_explorer_native_fn_clone_appdetailsffi(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun uniffi_explorer_native_fn_free_appdetailsffi(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_explorer_native_fn_constructor_appdetailsffi_new(uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun uniffi_explorer_native_fn_method_appdetailsffi_domain(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_explorer_native_fn_method_appdetailsffi_favicon(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_explorer_native_fn_method_appdetailsffi_identity(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_explorer_native_fn_method_appdetailsffi_sign_in_statement(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_explorer_native_fn_clone_eventemitterffi(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun uniffi_explorer_native_fn_free_eventemitterffi(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_explorer_native_fn_constructor_eventemitterffi_new(uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun uniffi_explorer_native_fn_method_eventemitterffi_set_listener(`ptr`: Pointer,`listener`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_explorer_native_fn_method_eventemitterffi_start(`ptr`: Pointer,`eventsourceUri`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_explorer_native_fn_clone_eventlistenerffi(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun uniffi_explorer_native_fn_free_eventlistenerffi(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_explorer_native_fn_init_callback_vtable_eventlistenerffi(`vtable`: UniffiVTableCallbackInterfaceEventListenerFfi,
): Unit
fun uniffi_explorer_native_fn_method_eventlistenerffi_on_event(`ptr`: Pointer,`event`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_explorer_native_fn_func_rustffi_construct_tx(`x402Resource`: RustBuffer.ByValue,`mainnet`: Byte,
): Long
fun uniffi_explorer_native_fn_func_rustffi_discover_resources(`x402ResourceUri`: RustBuffer.ByValue,
): Long
fun uniffi_explorer_native_fn_func_rustffi_ffi_version(uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_explorer_native_fn_func_rustffi_format_amount(`amount`: RustBuffer.ByValue,`decimals`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_explorer_native_fn_func_rustffi_get_auth(uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_explorer_native_fn_func_rustffi_get_profile(
): Long
fun uniffi_explorer_native_fn_func_rustffi_get_x402(`uri`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_explorer_native_fn_func_rustffi_get_x402_resources(uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_explorer_native_fn_func_rustffi_init_db(`appDirPath`: RustBuffer.ByValue,
): Long
fun uniffi_explorer_native_fn_func_rustffi_optimize_transaction(`x402Resource`: RustBuffer.ByValue,`mainnet`: Byte,
): Long
fun uniffi_explorer_native_fn_func_rustffi_send_optimized_transaction(`tx`: RustBuffer.ByValue,
): Long
fun uniffi_explorer_native_fn_func_rustffi_shorten_base58(`base58String`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_explorer_native_fn_func_rustffi_siws(`authData`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_explorer_native_fn_func_rustffi_store_x402(`data`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_explorer_native_fn_func_rustffi_to_base64(`bytes`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_explorer_native_rustbuffer_alloc(`size`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_explorer_native_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_explorer_native_rustbuffer_free(`buf`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun ffi_explorer_native_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_explorer_native_rust_future_poll_u8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_explorer_native_rust_future_cancel_u8(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_free_u8(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_complete_u8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Byte
fun ffi_explorer_native_rust_future_poll_i8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_explorer_native_rust_future_cancel_i8(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_free_i8(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_complete_i8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Byte
fun ffi_explorer_native_rust_future_poll_u16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_explorer_native_rust_future_cancel_u16(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_free_u16(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_complete_u16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Short
fun ffi_explorer_native_rust_future_poll_i16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_explorer_native_rust_future_cancel_i16(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_free_i16(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_complete_i16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Short
fun ffi_explorer_native_rust_future_poll_u32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_explorer_native_rust_future_cancel_u32(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_free_u32(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_complete_u32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Int
fun ffi_explorer_native_rust_future_poll_i32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_explorer_native_rust_future_cancel_i32(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_free_i32(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_complete_i32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Int
fun ffi_explorer_native_rust_future_poll_u64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_explorer_native_rust_future_cancel_u64(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_free_u64(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_complete_u64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
fun ffi_explorer_native_rust_future_poll_i64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_explorer_native_rust_future_cancel_i64(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_free_i64(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_complete_i64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
fun ffi_explorer_native_rust_future_poll_f32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_explorer_native_rust_future_cancel_f32(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_free_f32(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_complete_f32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Float
fun ffi_explorer_native_rust_future_poll_f64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_explorer_native_rust_future_cancel_f64(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_free_f64(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_complete_f64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Double
fun ffi_explorer_native_rust_future_poll_pointer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_explorer_native_rust_future_cancel_pointer(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_free_pointer(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_complete_pointer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun ffi_explorer_native_rust_future_poll_rust_buffer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_explorer_native_rust_future_cancel_rust_buffer(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_free_rust_buffer(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_complete_rust_buffer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_explorer_native_rust_future_poll_void(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_explorer_native_rust_future_cancel_void(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_free_void(`handle`: Long,
): Unit
fun ffi_explorer_native_rust_future_complete_void(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Unit

}

private fun uniffiCheckContractApiVersion(lib: IntegrityCheckingUniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_explorer_native_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}
@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: IntegrityCheckingUniffiLib) {
    if (lib.uniffi_explorer_native_checksum_func_rustffi_construct_tx() != 16498.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_func_rustffi_discover_resources() != 53841.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_func_rustffi_ffi_version() != 31370.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_func_rustffi_format_amount() != 3050.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_func_rustffi_get_auth() != 9158.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_func_rustffi_get_profile() != 40031.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_func_rustffi_get_x402() != 48304.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_func_rustffi_get_x402_resources() != 33144.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_func_rustffi_init_db() != 59145.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_func_rustffi_optimize_transaction() != 50598.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_func_rustffi_send_optimized_transaction() != 12686.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_func_rustffi_shorten_base58() != 57651.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_func_rustffi_siws() != 23166.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_func_rustffi_store_x402() != 50003.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_func_rustffi_to_base64() != 46560.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_method_appdetailsffi_domain() != 23914.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_method_appdetailsffi_favicon() != 40395.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_method_appdetailsffi_identity() != 40338.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_method_appdetailsffi_sign_in_statement() != 3531.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_method_eventemitterffi_set_listener() != 25921.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_method_eventemitterffi_start() != 32969.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_method_eventlistenerffi_on_event() != 14556.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_constructor_appdetailsffi_new() != 51092.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_explorer_native_checksum_constructor_eventemitterffi_new() != 32487.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

/**
 * @suppress
 */
public fun uniffiEnsureInitialized() {
    UniffiLib.INSTANCE
}

// Async support
// Async return type handlers

internal const val UNIFFI_RUST_FUTURE_POLL_READY = 0.toByte()
internal const val UNIFFI_RUST_FUTURE_POLL_MAYBE_READY = 1.toByte()

internal val uniffiContinuationHandleMap = UniffiHandleMap<CancellableContinuation<Byte>>()

// FFI type for Rust future continuations
internal object uniffiRustFutureContinuationCallbackImpl: UniffiRustFutureContinuationCallback {
    override fun callback(data: Long, pollResult: Byte) {
        uniffiContinuationHandleMap.remove(data).resume(pollResult)
    }
}

internal suspend fun<T, F, E: kotlin.Exception> uniffiRustCallAsync(
    rustFuture: Long,
    pollFunc: (Long, UniffiRustFutureContinuationCallback, Long) -> Unit,
    completeFunc: (Long, UniffiRustCallStatus) -> F,
    freeFunc: (Long) -> Unit,
    liftFunc: (F) -> T,
    errorHandler: UniffiRustCallStatusErrorHandler<E>
): T {
    try {
        do {
            val pollResult = suspendCancellableCoroutine<Byte> { continuation ->
                pollFunc(
                    rustFuture,
                    uniffiRustFutureContinuationCallbackImpl,
                    uniffiContinuationHandleMap.insert(continuation)
                )
            }
        } while (pollResult != UNIFFI_RUST_FUTURE_POLL_READY);

        return liftFunc(
            uniffiRustCallWithError(errorHandler, { status -> completeFunc(rustFuture, status) })
        )
    } finally {
        freeFunc(rustFuture)
    }
}

// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            for (arg in args) {
                when (arg) {
                    is Disposable -> arg.destroy()
                    is ArrayList<*> -> {
                        for (idx in arg.indices) {
                            val element = arg[idx]
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                    is Map<*, *> -> {
                        for (element in arg.values) {
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                    is Iterable<*> -> {
                        for (element in arg) {
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                }
            }
        }
    }
}

/**
 * @suppress
 */
inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/** 
 * Used to instantiate an interface without an actual pointer, for fakes in tests, mostly.
 *
 * @suppress
 * */
object NoPointer// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0
// Callback return codes
internal const val UNIFFI_CALLBACK_SUCCESS = 0
internal const val UNIFFI_CALLBACK_ERROR = 1
internal const val UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

/**
 * @suppress
 */
public abstract class FfiConverterCallbackInterface<CallbackInterface: Any>: FfiConverter<CallbackInterface, Long> {
    internal val handleMap = UniffiHandleMap<CallbackInterface>()

    internal fun drop(handle: Long) {
        handleMap.remove(handle)
    }

    override fun lift(value: Long): CallbackInterface {
        return handleMap.get(value)
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) = handleMap.insert(value)

    override fun allocationSize(value: CallbackInterface) = 8UL

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}
/**
 * The cleaner interface for Object finalization code to run.
 * This is the entry point to any implementation that we're using.
 *
 * The cleaner registers objects and returns cleanables, so now we are
 * defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
 * different implmentations available at compile time.
 *
 * @suppress
 */
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner = com.sun.jna.internal.Cleaner.getCleaner()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}


// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.
private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    try {
        // For safety's sake: if the library hasn't been run in android_cleaner = true
        // mode, but is being run on Android, then we still need to think about
        // Android API versions.
        // So we check if java.lang.ref.Cleaner is there, and use that…
        java.lang.Class.forName("java.lang.ref.Cleaner")
        JavaLangRefCleaner()
    } catch (e: ClassNotFoundException) {
        // … otherwise, fallback to the JNA cleaner.
        UniffiJnaCleaner()
    }

private class JavaLangRefCleaner : UniffiCleaner {
    val cleaner = java.lang.ref.Cleaner.create()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        JavaLangRefCleanable(cleaner.register(value, cleanUpTask))
}

private class JavaLangRefCleanable(
    val cleanable: java.lang.ref.Cleaner.Cleanable
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

/**
 * @suppress
 */
public object FfiConverterUByte: FfiConverter<UByte, Byte> {
    override fun lift(value: Byte): UByte {
        return value.toUByte()
    }

    override fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    override fun lower(value: UByte): Byte {
        return value.toByte()
    }

    override fun allocationSize(value: UByte) = 1UL

    override fun write(value: UByte, buf: ByteBuffer) {
        buf.put(value.toByte())
    }
}

/**
 * @suppress
 */
public object FfiConverterByte: FfiConverter<Byte, Byte> {
    override fun lift(value: Byte): Byte {
        return value
    }

    override fun read(buf: ByteBuffer): Byte {
        return buf.get()
    }

    override fun lower(value: Byte): Byte {
        return value
    }

    override fun allocationSize(value: Byte) = 1UL

    override fun write(value: Byte, buf: ByteBuffer) {
        buf.put(value)
    }
}

/**
 * @suppress
 */
public object FfiConverterInt: FfiConverter<Int, Int> {
    override fun lift(value: Int): Int {
        return value
    }

    override fun read(buf: ByteBuffer): Int {
        return buf.getInt()
    }

    override fun lower(value: Int): Int {
        return value
    }

    override fun allocationSize(value: Int) = 4UL

    override fun write(value: Int, buf: ByteBuffer) {
        buf.putInt(value)
    }
}

/**
 * @suppress
 */
public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

/**
 * @suppress
 */
public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}

/**
 * @suppress
 */
public object FfiConverterByteArray: FfiConverterRustBuffer<ByteArray> {
    override fun read(buf: ByteBuffer): ByteArray {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr
    }
    override fun allocationSize(value: ByteArray): ULong {
        return 4UL + value.size.toULong()
    }
    override fun write(value: ByteArray, buf: ByteBuffer) {
        buf.putInt(value.size)
        buf.put(value)
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface AppDetailsFfiInterface {
    
    fun `domain`(): kotlin.String
    
    fun `favicon`(): kotlin.String
    
    fun `identity`(): kotlin.String
    
    fun `signInStatement`(): kotlin.String
    
    companion object
}

open class AppDetailsFfi: Disposable, AutoCloseable, AppDetailsFfiInterface
{

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }
    constructor() :
        this(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_explorer_native_fn_constructor_appdetailsffi_new(
        _status)
}
    )

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_explorer_native_fn_free_appdetailsffi(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_explorer_native_fn_clone_appdetailsffi(pointer!!, status)
        }
    }

    override fun `domain`(): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_explorer_native_fn_method_appdetailsffi_domain(
        it, _status)
}
    }
    )
    }
    

    override fun `favicon`(): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_explorer_native_fn_method_appdetailsffi_favicon(
        it, _status)
}
    }
    )
    }
    

    override fun `identity`(): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_explorer_native_fn_method_appdetailsffi_identity(
        it, _status)
}
    }
    )
    }
    

    override fun `signInStatement`(): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_explorer_native_fn_method_appdetailsffi_sign_in_statement(
        it, _status)
}
    }
    )
    }
    

    

    
    
    companion object
    
}

/**
 * @suppress
 */
public object FfiConverterTypeAppDetailsFfi: FfiConverter<AppDetailsFfi, Pointer> {

    override fun lower(value: AppDetailsFfi): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): AppDetailsFfi {
        return AppDetailsFfi(value)
    }

    override fun read(buf: ByteBuffer): AppDetailsFfi {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: AppDetailsFfi) = 8UL

    override fun write(value: AppDetailsFfi, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface EventEmitterFfiInterface {
    
    fun `setListener`(`listener`: EventListenerFfi)
    
    fun `start`(`eventsourceUri`: kotlin.String)
    
    companion object
}

open class EventEmitterFfi: Disposable, AutoCloseable, EventEmitterFfiInterface
{

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }
    constructor() :
        this(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_explorer_native_fn_constructor_eventemitterffi_new(
        _status)
}
    )

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_explorer_native_fn_free_eventemitterffi(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_explorer_native_fn_clone_eventemitterffi(pointer!!, status)
        }
    }

    override fun `setListener`(`listener`: EventListenerFfi)
        = 
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_explorer_native_fn_method_eventemitterffi_set_listener(
        it, FfiConverterTypeEventListenerFfi.lower(`listener`),_status)
}
    }
    
    

    override fun `start`(`eventsourceUri`: kotlin.String)
        = 
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_explorer_native_fn_method_eventemitterffi_start(
        it, FfiConverterString.lower(`eventsourceUri`),_status)
}
    }
    
    

    

    
    
    companion object
    
}

/**
 * @suppress
 */
public object FfiConverterTypeEventEmitterFfi: FfiConverter<EventEmitterFfi, Pointer> {

    override fun lower(value: EventEmitterFfi): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): EventEmitterFfi {
        return EventEmitterFfi(value)
    }

    override fun read(buf: ByteBuffer): EventEmitterFfi {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: EventEmitterFfi) = 8UL

    override fun write(value: EventEmitterFfi, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface EventListenerFfi {
    
    fun `onEvent`(`event`: EventSourceDataFfi)
    
    companion object
}

open class EventListenerFfiImpl: Disposable, AutoCloseable, EventListenerFfi
{

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_explorer_native_fn_free_eventlistenerffi(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_explorer_native_fn_clone_eventlistenerffi(pointer!!, status)
        }
    }

    
    @Throws(NativeException::class)override fun `onEvent`(`event`: EventSourceDataFfi)
        = 
    callWithPointer {
    uniffiRustCallWithError(NativeException) { _status ->
    UniffiLib.INSTANCE.uniffi_explorer_native_fn_method_eventlistenerffi_on_event(
        it, FfiConverterTypeEventSourceDataFfi.lower(`event`),_status)
}
    }
    
    

    

    
    
    companion object
    
}


// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceEventListenerFfi {
    internal object `onEvent`: UniffiCallbackInterfaceEventListenerFfiMethod0 {
        override fun callback(`uniffiHandle`: Long,`event`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeEventListenerFfi.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onEvent`(
                    FfiConverterTypeEventSourceDataFfi.lift(`event`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCallWithError(
                uniffiCallStatus,
                makeCall,
                writeReturn,
                { e: NativeException -> FfiConverterTypeNativeError.lower(e) }
            )
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeEventListenerFfi.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceEventListenerFfi.UniffiByValue(
        `onEvent`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_explorer_native_fn_init_callback_vtable_eventlistenerffi(vtable)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeEventListenerFfi: FfiConverter<EventListenerFfi, Pointer> {
    internal val handleMap = UniffiHandleMap<EventListenerFfi>()

    override fun lower(value: EventListenerFfi): Pointer {
        return Pointer(handleMap.insert(value))
    }

    override fun lift(value: Pointer): EventListenerFfi {
        return EventListenerFfiImpl(value)
    }

    override fun read(buf: ByteBuffer): EventListenerFfi {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: EventListenerFfi) = 8UL

    override fun write(value: EventListenerFfi, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}



data class Base58String (
    var `address`: kotlin.String
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeBase58String: FfiConverterRustBuffer<Base58String> {
    override fun read(buf: ByteBuffer): Base58String {
        return Base58String(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: Base58String) = (
            FfiConverterString.allocationSize(value.`address`)
    )

    override fun write(value: Base58String, buf: ByteBuffer) {
            FfiConverterString.write(value.`address`, buf)
    }
}



data class DiscoveryFfi (
    var `uriScheme`: X402UriSchemeFfi, 
    var `uri`: kotlin.String, 
    var `title`: kotlin.String?, 
    var `description`: kotlin.String?, 
    var `headerImage`: kotlin.String?, 
    var `amount`: kotlin.String, 
    var `asset`: kotlin.String, 
    var `payTo`: kotlin.String, 
    var `maxtimeoutSeconds`: kotlin.String, 
    var `feePayer`: kotlin.String, 
    var `assetInfo`: TokenInfo?
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeDiscoveryFfi: FfiConverterRustBuffer<DiscoveryFfi> {
    override fun read(buf: ByteBuffer): DiscoveryFfi {
        return DiscoveryFfi(
            FfiConverterTypeX402UriSchemeFfi.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalTypeTokenInfo.read(buf),
        )
    }

    override fun allocationSize(value: DiscoveryFfi) = (
            FfiConverterTypeX402UriSchemeFfi.allocationSize(value.`uriScheme`) +
            FfiConverterString.allocationSize(value.`uri`) +
            FfiConverterOptionalString.allocationSize(value.`title`) +
            FfiConverterOptionalString.allocationSize(value.`description`) +
            FfiConverterOptionalString.allocationSize(value.`headerImage`) +
            FfiConverterString.allocationSize(value.`amount`) +
            FfiConverterString.allocationSize(value.`asset`) +
            FfiConverterString.allocationSize(value.`payTo`) +
            FfiConverterString.allocationSize(value.`maxtimeoutSeconds`) +
            FfiConverterString.allocationSize(value.`feePayer`) +
            FfiConverterOptionalTypeTokenInfo.allocationSize(value.`assetInfo`)
    )

    override fun write(value: DiscoveryFfi, buf: ByteBuffer) {
            FfiConverterTypeX402UriSchemeFfi.write(value.`uriScheme`, buf)
            FfiConverterString.write(value.`uri`, buf)
            FfiConverterOptionalString.write(value.`title`, buf)
            FfiConverterOptionalString.write(value.`description`, buf)
            FfiConverterOptionalString.write(value.`headerImage`, buf)
            FfiConverterString.write(value.`amount`, buf)
            FfiConverterString.write(value.`asset`, buf)
            FfiConverterString.write(value.`payTo`, buf)
            FfiConverterString.write(value.`maxtimeoutSeconds`, buf)
            FfiConverterString.write(value.`feePayer`, buf)
            FfiConverterOptionalTypeTokenInfo.write(value.`assetInfo`, buf)
    }
}



data class EventSourceDataFfi (
    var `contentTitle`: kotlin.String, 
    var `contentText`: kotlin.String, 
    var `shortCriticalText`: kotlin.String, 
    var `progress`: EventSourceProgressPointFfi, 
    var `isProgressIndeterminate`: kotlin.Boolean, 
    var `actions`: List<kotlin.String>, 
    var `style`: EventSourceProgressStyleFfi
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeEventSourceDataFfi: FfiConverterRustBuffer<EventSourceDataFfi> {
    override fun read(buf: ByteBuffer): EventSourceDataFfi {
        return EventSourceDataFfi(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeEventSourceProgressPointFfi.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterTypeEventSourceProgressStyleFfi.read(buf),
        )
    }

    override fun allocationSize(value: EventSourceDataFfi) = (
            FfiConverterString.allocationSize(value.`contentTitle`) +
            FfiConverterString.allocationSize(value.`contentText`) +
            FfiConverterString.allocationSize(value.`shortCriticalText`) +
            FfiConverterTypeEventSourceProgressPointFfi.allocationSize(value.`progress`) +
            FfiConverterBoolean.allocationSize(value.`isProgressIndeterminate`) +
            FfiConverterSequenceString.allocationSize(value.`actions`) +
            FfiConverterTypeEventSourceProgressStyleFfi.allocationSize(value.`style`)
    )

    override fun write(value: EventSourceDataFfi, buf: ByteBuffer) {
            FfiConverterString.write(value.`contentTitle`, buf)
            FfiConverterString.write(value.`contentText`, buf)
            FfiConverterString.write(value.`shortCriticalText`, buf)
            FfiConverterTypeEventSourceProgressPointFfi.write(value.`progress`, buf)
            FfiConverterBoolean.write(value.`isProgressIndeterminate`, buf)
            FfiConverterSequenceString.write(value.`actions`, buf)
            FfiConverterTypeEventSourceProgressStyleFfi.write(value.`style`, buf)
    }
}



data class EventSourceProgressPointFfi (
    var `point`: kotlin.Int, 
    var `color`: kotlin.String
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeEventSourceProgressPointFfi: FfiConverterRustBuffer<EventSourceProgressPointFfi> {
    override fun read(buf: ByteBuffer): EventSourceProgressPointFfi {
        return EventSourceProgressPointFfi(
            FfiConverterInt.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: EventSourceProgressPointFfi) = (
            FfiConverterInt.allocationSize(value.`point`) +
            FfiConverterString.allocationSize(value.`color`)
    )

    override fun write(value: EventSourceProgressPointFfi, buf: ByteBuffer) {
            FfiConverterInt.write(value.`point`, buf)
            FfiConverterString.write(value.`color`, buf)
    }
}



data class EventSourceProgressSegmentFfi (
    var `segment`: kotlin.Int, 
    var `color`: kotlin.String
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeEventSourceProgressSegmentFfi: FfiConverterRustBuffer<EventSourceProgressSegmentFfi> {
    override fun read(buf: ByteBuffer): EventSourceProgressSegmentFfi {
        return EventSourceProgressSegmentFfi(
            FfiConverterInt.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: EventSourceProgressSegmentFfi) = (
            FfiConverterInt.allocationSize(value.`segment`) +
            FfiConverterString.allocationSize(value.`color`)
    )

    override fun write(value: EventSourceProgressSegmentFfi, buf: ByteBuffer) {
            FfiConverterInt.write(value.`segment`, buf)
            FfiConverterString.write(value.`color`, buf)
    }
}



data class EventSourceProgressStyleFfi (
    var `points`: List<EventSourceProgressPointFfi>, 
    var `segments`: List<EventSourceProgressSegmentFfi>
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeEventSourceProgressStyleFfi: FfiConverterRustBuffer<EventSourceProgressStyleFfi> {
    override fun read(buf: ByteBuffer): EventSourceProgressStyleFfi {
        return EventSourceProgressStyleFfi(
            FfiConverterSequenceTypeEventSourceProgressPointFfi.read(buf),
            FfiConverterSequenceTypeEventSourceProgressSegmentFfi.read(buf),
        )
    }

    override fun allocationSize(value: EventSourceProgressStyleFfi) = (
            FfiConverterSequenceTypeEventSourceProgressPointFfi.allocationSize(value.`points`) +
            FfiConverterSequenceTypeEventSourceProgressSegmentFfi.allocationSize(value.`segments`)
    )

    override fun write(value: EventSourceProgressStyleFfi, buf: ByteBuffer) {
            FfiConverterSequenceTypeEventSourceProgressPointFfi.write(value.`points`, buf)
            FfiConverterSequenceTypeEventSourceProgressSegmentFfi.write(value.`segments`, buf)
    }
}



data class SiwsFfiAuthResult (
    var `publicKey`: List<kotlin.Byte>, 
    var `signedMessage`: List<kotlin.Byte>, 
    var `signature`: List<kotlin.Byte>, 
    var `signatureType`: kotlin.String, 
    var `authToken`: kotlin.String
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeSiwsFfiAuthResult: FfiConverterRustBuffer<SiwsFfiAuthResult> {
    override fun read(buf: ByteBuffer): SiwsFfiAuthResult {
        return SiwsFfiAuthResult(
            FfiConverterSequenceByte.read(buf),
            FfiConverterSequenceByte.read(buf),
            FfiConverterSequenceByte.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: SiwsFfiAuthResult) = (
            FfiConverterSequenceByte.allocationSize(value.`publicKey`) +
            FfiConverterSequenceByte.allocationSize(value.`signedMessage`) +
            FfiConverterSequenceByte.allocationSize(value.`signature`) +
            FfiConverterString.allocationSize(value.`signatureType`) +
            FfiConverterString.allocationSize(value.`authToken`)
    )

    override fun write(value: SiwsFfiAuthResult, buf: ByteBuffer) {
            FfiConverterSequenceByte.write(value.`publicKey`, buf)
            FfiConverterSequenceByte.write(value.`signedMessage`, buf)
            FfiConverterSequenceByte.write(value.`signature`, buf)
            FfiConverterString.write(value.`signatureType`, buf)
            FfiConverterString.write(value.`authToken`, buf)
    }
}



data class TokenInfo (
    var `chainId`: kotlin.UByte, 
    var `address`: kotlin.String, 
    var `symbol`: kotlin.String, 
    var `name`: kotlin.String, 
    var `decimals`: kotlin.UByte, 
    var `logoUri`: kotlin.String
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTokenInfo: FfiConverterRustBuffer<TokenInfo> {
    override fun read(buf: ByteBuffer): TokenInfo {
        return TokenInfo(
            FfiConverterUByte.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUByte.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: TokenInfo) = (
            FfiConverterUByte.allocationSize(value.`chainId`) +
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterString.allocationSize(value.`symbol`) +
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterUByte.allocationSize(value.`decimals`) +
            FfiConverterString.allocationSize(value.`logoUri`)
    )

    override fun write(value: TokenInfo, buf: ByteBuffer) {
            FfiConverterUByte.write(value.`chainId`, buf)
            FfiConverterString.write(value.`address`, buf)
            FfiConverterString.write(value.`symbol`, buf)
            FfiConverterString.write(value.`name`, buf)
            FfiConverterUByte.write(value.`decimals`, buf)
            FfiConverterString.write(value.`logoUri`, buf)
    }
}



data class UserProfile (
    var `name`: kotlin.String, 
    var `publicKey`: Base58String
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeUserProfile: FfiConverterRustBuffer<UserProfile> {
    override fun read(buf: ByteBuffer): UserProfile {
        return UserProfile(
            FfiConverterString.read(buf),
            FfiConverterTypeBase58String.read(buf),
        )
    }

    override fun allocationSize(value: UserProfile) = (
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterTypeBase58String.allocationSize(value.`publicKey`)
    )

    override fun write(value: UserProfile, buf: ByteBuffer) {
            FfiConverterString.write(value.`name`, buf)
            FfiConverterTypeBase58String.write(value.`publicKey`, buf)
    }
}



data class X402Data (
    var `uri`: kotlin.String, 
    var `tx`: kotlin.String?, 
    var `resourceData`: DiscoveryFfi
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeX402Data: FfiConverterRustBuffer<X402Data> {
    override fun read(buf: ByteBuffer): X402Data {
        return X402Data(
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterTypeDiscoveryFfi.read(buf),
        )
    }

    override fun allocationSize(value: X402Data) = (
            FfiConverterString.allocationSize(value.`uri`) +
            FfiConverterOptionalString.allocationSize(value.`tx`) +
            FfiConverterTypeDiscoveryFfi.allocationSize(value.`resourceData`)
    )

    override fun write(value: X402Data, buf: ByteBuffer) {
            FfiConverterString.write(value.`uri`, buf)
            FfiConverterOptionalString.write(value.`tx`, buf)
            FfiConverterTypeDiscoveryFfi.write(value.`resourceData`, buf)
    }
}





sealed class NativeException: kotlin.Exception() {
    
    class MissingUserAddress(
        ) : NativeException() {
        override val message
            get() = ""
    }
    
    class InitKv(
        
        val v1: kotlin.String
        ) : NativeException() {
        override val message
            get() = "v1=${ v1 }"
    }
    
    class VectorNot32BytesLong(
        ) : NativeException() {
        override val message
            get() = ""
    }
    
    class VectorNot64BytesLong(
        ) : NativeException() {
        override val message
            get() = ""
    }
    
    class PackingUserProfile(
        ) : NativeException() {
        override val message
            get() = ""
    }
    
    class UnpackingUserProfile(
        ) : NativeException() {
        override val message
            get() = ""
    }
    
    class UnableToSetGlobalStorageObject(
        ) : NativeException() {
        override val message
            get() = ""
    }
    
    class StoreIsNotInitialized(
        ) : NativeException() {
        override val message
            get() = ""
    }
    
    class StorageException(
        
        val v1: kotlin.String
        ) : NativeException() {
        override val message
            get() = "v1=${ v1 }"
    }
    
    class InvalidBase58String(
        ) : NativeException() {
        override val message
            get() = ""
    }
    
    class InvalidBase58StringIsNot32BytesLength(
        ) : NativeException() {
        override val message
            get() = ""
    }
    
    class SerializeSiwsAuthResultToBytes(
        ) : NativeException() {
        override val message
            get() = ""
    }
    
    class DeserializeSiwsAuthResultToBytes(
        ) : NativeException() {
        override val message
            get() = ""
    }
    
    class X402Uri(
        
        val v1: kotlin.String
        ) : NativeException() {
        override val message
            get() = "v1=${ v1 }"
    }
    
    class UnsupportedX402Scheme(
        ) : NativeException() {
        override val message
            get() = ""
    }
    
    class InvalidX402Uri(
        
        val v1: kotlin.String
        ) : NativeException() {
        override val message
            get() = "v1=${ v1 }"
    }
    
    class Https(
        
        val v1: kotlin.String
        ) : NativeException() {
        override val message
            get() = "v1=${ v1 }"
    }
    
    class AtLeastOneAcceptsItemIsNeeded(
        ) : NativeException() {
        override val message
            get() = ""
    }
    
    class UnableToDeserializeTokenList(
        ) : NativeException() {
        override val message
            get() = ""
    }
    
    class UnableToSerializeTokenValue(
        
        val v1: kotlin.String
        ) : NativeException() {
        override val message
            get() = "v1=${ v1 }"
    }
    
    class CorruptedTokenInfoEntry(
        
        val v1: kotlin.String
        ) : NativeException() {
        override val message
            get() = "v1=${ v1 }"
    }
    
    class AmountNotU64(
        ) : NativeException() {
        override val message
            get() = ""
    }
    
    class UnableToSerializeTransaction(
        ) : NativeException() {
        override val message
            get() = ""
    }
    
    class InvalidTransferCheckedData(
        
        val v1: kotlin.String
        ) : NativeException() {
        override val message
            get() = "v1=${ v1 }"
    }
    
    class UnableToEncodeBase64TxToJson(
        ) : NativeException() {
        override val message
            get() = ""
    }
    
    class UnableToDecodeOptimizedTx(
        ) : NativeException() {
        override val message
            get() = ""
    }
    
    class InvalidLiveUpdatesLargeIconBase64(
        ) : NativeException() {
        override val message
            get() = ""
    }
    
    class InvalidLiveUpdatesProgressTrackerIconBase64(
        ) : NativeException() {
        override val message
            get() = ""
    }
    
    class SerializeX402DataToBytes(
        ) : NativeException() {
        override val message
            get() = ""
    }
    
    class DeserializeX402Resource(
        ) : NativeException() {
        override val message
            get() = ""
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<NativeException> {
        override fun lift(error_buf: RustBuffer.ByValue): NativeException = FfiConverterTypeNativeError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeNativeError : FfiConverterRustBuffer<NativeException> {
    override fun read(buf: ByteBuffer): NativeException {
        

        return when(buf.getInt()) {
            1 -> NativeException.MissingUserAddress()
            2 -> NativeException.InitKv(
                FfiConverterString.read(buf),
                )
            3 -> NativeException.VectorNot32BytesLong()
            4 -> NativeException.VectorNot64BytesLong()
            5 -> NativeException.PackingUserProfile()
            6 -> NativeException.UnpackingUserProfile()
            7 -> NativeException.UnableToSetGlobalStorageObject()
            8 -> NativeException.StoreIsNotInitialized()
            9 -> NativeException.StorageException(
                FfiConverterString.read(buf),
                )
            10 -> NativeException.InvalidBase58String()
            11 -> NativeException.InvalidBase58StringIsNot32BytesLength()
            12 -> NativeException.SerializeSiwsAuthResultToBytes()
            13 -> NativeException.DeserializeSiwsAuthResultToBytes()
            14 -> NativeException.X402Uri(
                FfiConverterString.read(buf),
                )
            15 -> NativeException.UnsupportedX402Scheme()
            16 -> NativeException.InvalidX402Uri(
                FfiConverterString.read(buf),
                )
            17 -> NativeException.Https(
                FfiConverterString.read(buf),
                )
            18 -> NativeException.AtLeastOneAcceptsItemIsNeeded()
            19 -> NativeException.UnableToDeserializeTokenList()
            20 -> NativeException.UnableToSerializeTokenValue(
                FfiConverterString.read(buf),
                )
            21 -> NativeException.CorruptedTokenInfoEntry(
                FfiConverterString.read(buf),
                )
            22 -> NativeException.AmountNotU64()
            23 -> NativeException.UnableToSerializeTransaction()
            24 -> NativeException.InvalidTransferCheckedData(
                FfiConverterString.read(buf),
                )
            25 -> NativeException.UnableToEncodeBase64TxToJson()
            26 -> NativeException.UnableToDecodeOptimizedTx()
            27 -> NativeException.InvalidLiveUpdatesLargeIconBase64()
            28 -> NativeException.InvalidLiveUpdatesProgressTrackerIconBase64()
            29 -> NativeException.SerializeX402DataToBytes()
            30 -> NativeException.DeserializeX402Resource()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: NativeException): ULong {
        return when(value) {
            is NativeException.MissingUserAddress -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NativeException.InitKv -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.v1)
            )
            is NativeException.VectorNot32BytesLong -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NativeException.VectorNot64BytesLong -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NativeException.PackingUserProfile -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NativeException.UnpackingUserProfile -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NativeException.UnableToSetGlobalStorageObject -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NativeException.StoreIsNotInitialized -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NativeException.StorageException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.v1)
            )
            is NativeException.InvalidBase58String -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NativeException.InvalidBase58StringIsNot32BytesLength -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NativeException.SerializeSiwsAuthResultToBytes -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NativeException.DeserializeSiwsAuthResultToBytes -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NativeException.X402Uri -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.v1)
            )
            is NativeException.UnsupportedX402Scheme -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NativeException.InvalidX402Uri -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.v1)
            )
            is NativeException.Https -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.v1)
            )
            is NativeException.AtLeastOneAcceptsItemIsNeeded -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NativeException.UnableToDeserializeTokenList -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NativeException.UnableToSerializeTokenValue -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.v1)
            )
            is NativeException.CorruptedTokenInfoEntry -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.v1)
            )
            is NativeException.AmountNotU64 -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NativeException.UnableToSerializeTransaction -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NativeException.InvalidTransferCheckedData -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.v1)
            )
            is NativeException.UnableToEncodeBase64TxToJson -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NativeException.UnableToDecodeOptimizedTx -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NativeException.InvalidLiveUpdatesLargeIconBase64 -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NativeException.InvalidLiveUpdatesProgressTrackerIconBase64 -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NativeException.SerializeX402DataToBytes -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NativeException.DeserializeX402Resource -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
        }
    }

    override fun write(value: NativeException, buf: ByteBuffer) {
        when(value) {
            is NativeException.MissingUserAddress -> {
                buf.putInt(1)
                Unit
            }
            is NativeException.InitKv -> {
                buf.putInt(2)
                FfiConverterString.write(value.v1, buf)
                Unit
            }
            is NativeException.VectorNot32BytesLong -> {
                buf.putInt(3)
                Unit
            }
            is NativeException.VectorNot64BytesLong -> {
                buf.putInt(4)
                Unit
            }
            is NativeException.PackingUserProfile -> {
                buf.putInt(5)
                Unit
            }
            is NativeException.UnpackingUserProfile -> {
                buf.putInt(6)
                Unit
            }
            is NativeException.UnableToSetGlobalStorageObject -> {
                buf.putInt(7)
                Unit
            }
            is NativeException.StoreIsNotInitialized -> {
                buf.putInt(8)
                Unit
            }
            is NativeException.StorageException -> {
                buf.putInt(9)
                FfiConverterString.write(value.v1, buf)
                Unit
            }
            is NativeException.InvalidBase58String -> {
                buf.putInt(10)
                Unit
            }
            is NativeException.InvalidBase58StringIsNot32BytesLength -> {
                buf.putInt(11)
                Unit
            }
            is NativeException.SerializeSiwsAuthResultToBytes -> {
                buf.putInt(12)
                Unit
            }
            is NativeException.DeserializeSiwsAuthResultToBytes -> {
                buf.putInt(13)
                Unit
            }
            is NativeException.X402Uri -> {
                buf.putInt(14)
                FfiConverterString.write(value.v1, buf)
                Unit
            }
            is NativeException.UnsupportedX402Scheme -> {
                buf.putInt(15)
                Unit
            }
            is NativeException.InvalidX402Uri -> {
                buf.putInt(16)
                FfiConverterString.write(value.v1, buf)
                Unit
            }
            is NativeException.Https -> {
                buf.putInt(17)
                FfiConverterString.write(value.v1, buf)
                Unit
            }
            is NativeException.AtLeastOneAcceptsItemIsNeeded -> {
                buf.putInt(18)
                Unit
            }
            is NativeException.UnableToDeserializeTokenList -> {
                buf.putInt(19)
                Unit
            }
            is NativeException.UnableToSerializeTokenValue -> {
                buf.putInt(20)
                FfiConverterString.write(value.v1, buf)
                Unit
            }
            is NativeException.CorruptedTokenInfoEntry -> {
                buf.putInt(21)
                FfiConverterString.write(value.v1, buf)
                Unit
            }
            is NativeException.AmountNotU64 -> {
                buf.putInt(22)
                Unit
            }
            is NativeException.UnableToSerializeTransaction -> {
                buf.putInt(23)
                Unit
            }
            is NativeException.InvalidTransferCheckedData -> {
                buf.putInt(24)
                FfiConverterString.write(value.v1, buf)
                Unit
            }
            is NativeException.UnableToEncodeBase64TxToJson -> {
                buf.putInt(25)
                Unit
            }
            is NativeException.UnableToDecodeOptimizedTx -> {
                buf.putInt(26)
                Unit
            }
            is NativeException.InvalidLiveUpdatesLargeIconBase64 -> {
                buf.putInt(27)
                Unit
            }
            is NativeException.InvalidLiveUpdatesProgressTrackerIconBase64 -> {
                buf.putInt(28)
                Unit
            }
            is NativeException.SerializeX402DataToBytes -> {
                buf.putInt(29)
                Unit
            }
            is NativeException.DeserializeX402Resource -> {
                buf.putInt(30)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




enum class X402UriActionFfi {
    
    DISCOVER,
    SUBSCRIBE,
    UNSUBSCRIBE,
    ONCE;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeX402UriActionFfi: FfiConverterRustBuffer<X402UriActionFfi> {
    override fun read(buf: ByteBuffer) = try {
        X402UriActionFfi.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: X402UriActionFfi) = 4UL

    override fun write(value: X402UriActionFfi, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class X402UriSchemeFfi {
    
    HTTPS,
    A2A,
    MCP;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeX402UriSchemeFfi: FfiConverterRustBuffer<X402UriSchemeFfi> {
    override fun read(buf: ByteBuffer) = try {
        X402UriSchemeFfi.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: X402UriSchemeFfi) = 4UL

    override fun write(value: X402UriSchemeFfi, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






/**
 * @suppress
 */
public object FfiConverterOptionalUByte: FfiConverterRustBuffer<kotlin.UByte?> {
    override fun read(buf: ByteBuffer): kotlin.UByte? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterUByte.read(buf)
    }

    override fun allocationSize(value: kotlin.UByte?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterUByte.allocationSize(value)
        }
    }

    override fun write(value: kotlin.UByte?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterUByte.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalString: FfiConverterRustBuffer<kotlin.String?> {
    override fun read(buf: ByteBuffer): kotlin.String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: kotlin.String?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: kotlin.String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeTokenInfo: FfiConverterRustBuffer<TokenInfo?> {
    override fun read(buf: ByteBuffer): TokenInfo? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeTokenInfo.read(buf)
    }

    override fun allocationSize(value: TokenInfo?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeTokenInfo.allocationSize(value)
        }
    }

    override fun write(value: TokenInfo?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeTokenInfo.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeUserProfile: FfiConverterRustBuffer<UserProfile?> {
    override fun read(buf: ByteBuffer): UserProfile? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeUserProfile.read(buf)
    }

    override fun allocationSize(value: UserProfile?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeUserProfile.allocationSize(value)
        }
    }

    override fun write(value: UserProfile?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeUserProfile.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeX402Data: FfiConverterRustBuffer<X402Data?> {
    override fun read(buf: ByteBuffer): X402Data? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeX402Data.read(buf)
    }

    override fun allocationSize(value: X402Data?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeX402Data.allocationSize(value)
        }
    }

    override fun write(value: X402Data?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeX402Data.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceByte: FfiConverterRustBuffer<List<kotlin.Byte>> {
    override fun read(buf: ByteBuffer): List<kotlin.Byte> {
        val len = buf.getInt()
        return List<kotlin.Byte>(len) {
            FfiConverterByte.read(buf)
        }
    }

    override fun allocationSize(value: List<kotlin.Byte>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterByte.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<kotlin.Byte>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterByte.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceString: FfiConverterRustBuffer<List<kotlin.String>> {
    override fun read(buf: ByteBuffer): List<kotlin.String> {
        val len = buf.getInt()
        return List<kotlin.String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<kotlin.String>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<kotlin.String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterString.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeDiscoveryFfi: FfiConverterRustBuffer<List<DiscoveryFfi>> {
    override fun read(buf: ByteBuffer): List<DiscoveryFfi> {
        val len = buf.getInt()
        return List<DiscoveryFfi>(len) {
            FfiConverterTypeDiscoveryFfi.read(buf)
        }
    }

    override fun allocationSize(value: List<DiscoveryFfi>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeDiscoveryFfi.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<DiscoveryFfi>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeDiscoveryFfi.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeEventSourceProgressPointFfi: FfiConverterRustBuffer<List<EventSourceProgressPointFfi>> {
    override fun read(buf: ByteBuffer): List<EventSourceProgressPointFfi> {
        val len = buf.getInt()
        return List<EventSourceProgressPointFfi>(len) {
            FfiConverterTypeEventSourceProgressPointFfi.read(buf)
        }
    }

    override fun allocationSize(value: List<EventSourceProgressPointFfi>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeEventSourceProgressPointFfi.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<EventSourceProgressPointFfi>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeEventSourceProgressPointFfi.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeEventSourceProgressSegmentFfi: FfiConverterRustBuffer<List<EventSourceProgressSegmentFfi>> {
    override fun read(buf: ByteBuffer): List<EventSourceProgressSegmentFfi> {
        val len = buf.getInt()
        return List<EventSourceProgressSegmentFfi>(len) {
            FfiConverterTypeEventSourceProgressSegmentFfi.read(buf)
        }
    }

    override fun allocationSize(value: List<EventSourceProgressSegmentFfi>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeEventSourceProgressSegmentFfi.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<EventSourceProgressSegmentFfi>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeEventSourceProgressSegmentFfi.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeX402Data: FfiConverterRustBuffer<List<X402Data>> {
    override fun read(buf: ByteBuffer): List<X402Data> {
        val len = buf.getInt()
        return List<X402Data>(len) {
            FfiConverterTypeX402Data.read(buf)
        }
    }

    override fun allocationSize(value: List<X402Data>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeX402Data.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<X402Data>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeX402Data.write(it, buf)
        }
    }
}








    @Throws(NativeException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `rustffiConstructTx`(`x402Resource`: DiscoveryFfi, `mainnet`: kotlin.Boolean) : kotlin.ByteArray {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_explorer_native_fn_func_rustffi_construct_tx(FfiConverterTypeDiscoveryFfi.lower(`x402Resource`),FfiConverterBoolean.lower(`mainnet`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_explorer_native_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_explorer_native_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_explorer_native_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterByteArray.lift(it) },
        // Error FFI converter
        NativeException.ErrorHandler,
    )
    }

    @Throws(NativeException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `rustffiDiscoverResources`(`x402ResourceUri`: kotlin.String) : List<DiscoveryFfi> {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_explorer_native_fn_func_rustffi_discover_resources(FfiConverterString.lower(`x402ResourceUri`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_explorer_native_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_explorer_native_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_explorer_native_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterSequenceTypeDiscoveryFfi.lift(it) },
        // Error FFI converter
        NativeException.ErrorHandler,
    )
    }
 fun `rustffiFfiVersion`(): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_explorer_native_fn_func_rustffi_ffi_version(
        _status)
}
    )
    }
    
 fun `rustffiFormatAmount`(`amount`: kotlin.String, `decimals`: kotlin.UByte?): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_explorer_native_fn_func_rustffi_format_amount(
        FfiConverterString.lower(`amount`),FfiConverterOptionalUByte.lower(`decimals`),_status)
}
    )
    }
    

    @Throws(NativeException::class) fun `rustffiGetAuth`(): kotlin.String? {
            return FfiConverterOptionalString.lift(
    uniffiRustCallWithError(NativeException) { _status ->
    UniffiLib.INSTANCE.uniffi_explorer_native_fn_func_rustffi_get_auth(
        _status)
}
    )
    }
    

    @Throws(NativeException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `rustffiGetProfile`() : UserProfile? {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_explorer_native_fn_func_rustffi_get_profile(),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_explorer_native_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_explorer_native_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_explorer_native_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterOptionalTypeUserProfile.lift(it) },
        // Error FFI converter
        NativeException.ErrorHandler,
    )
    }

    @Throws(NativeException::class) fun `rustffiGetX402`(`uri`: kotlin.String): X402Data? {
            return FfiConverterOptionalTypeX402Data.lift(
    uniffiRustCallWithError(NativeException) { _status ->
    UniffiLib.INSTANCE.uniffi_explorer_native_fn_func_rustffi_get_x402(
        FfiConverterString.lower(`uri`),_status)
}
    )
    }
    

    @Throws(NativeException::class) fun `rustffiGetX402Resources`(): List<X402Data> {
            return FfiConverterSequenceTypeX402Data.lift(
    uniffiRustCallWithError(NativeException) { _status ->
    UniffiLib.INSTANCE.uniffi_explorer_native_fn_func_rustffi_get_x402_resources(
        _status)
}
    )
    }
    

    @Throws(NativeException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `rustffiInitDb`(`appDirPath`: kotlin.String) {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_explorer_native_fn_func_rustffi_init_db(FfiConverterString.lower(`appDirPath`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_explorer_native_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_explorer_native_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_explorer_native_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        NativeException.ErrorHandler,
    )
    }

    @Throws(NativeException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `rustffiOptimizeTransaction`(`x402Resource`: DiscoveryFfi, `mainnet`: kotlin.Boolean) : kotlin.ByteArray {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_explorer_native_fn_func_rustffi_optimize_transaction(FfiConverterTypeDiscoveryFfi.lower(`x402Resource`),FfiConverterBoolean.lower(`mainnet`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_explorer_native_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_explorer_native_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_explorer_native_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterByteArray.lift(it) },
        // Error FFI converter
        NativeException.ErrorHandler,
    )
    }

    @Throws(NativeException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `rustffiSendOptimizedTransaction`(`tx`: kotlin.ByteArray) : kotlin.String {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_explorer_native_fn_func_rustffi_send_optimized_transaction(FfiConverterByteArray.lower(`tx`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_explorer_native_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_explorer_native_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_explorer_native_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        NativeException.ErrorHandler,
    )
    }
 fun `rustffiShortenBase58`(`base58String`: kotlin.String): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_explorer_native_fn_func_rustffi_shorten_base58(
        FfiConverterString.lower(`base58String`),_status)
}
    )
    }
    

    @Throws(NativeException::class) fun `rustffiSiws`(`authData`: SiwsFfiAuthResult): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCallWithError(NativeException) { _status ->
    UniffiLib.INSTANCE.uniffi_explorer_native_fn_func_rustffi_siws(
        FfiConverterTypeSiwsFfiAuthResult.lower(`authData`),_status)
}
    )
    }
    

    @Throws(NativeException::class) fun `rustffiStoreX402`(`data`: X402Data)
        = 
    uniffiRustCallWithError(NativeException) { _status ->
    UniffiLib.INSTANCE.uniffi_explorer_native_fn_func_rustffi_store_x402(
        FfiConverterTypeX402Data.lower(`data`),_status)
}
    
    
 fun `rustffiToBase64`(`bytes`: kotlin.ByteArray): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_explorer_native_fn_func_rustffi_to_base64(
        FfiConverterByteArray.lower(`bytes`),_status)
}
    )
    }
    


